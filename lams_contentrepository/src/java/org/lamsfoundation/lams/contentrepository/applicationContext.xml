<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
  - Application context definition for content repository application context.
  - Requires lams.jar applicationContent.xml.
 -->
<beans>

	<!-- ========================= BUSINESS OBJECT DEFINITIONS ======================== -->

	<!--  repository (as repositoryAdminService) and ticket are the two main interfaces -->
	<!--  into the repository and as such have transaction definitions on their interfaces -->

	<!--  Only rollback on runtime exceptions - the checked exceptions may be handled by -->
	<!--  the calling code, so we don't want to mark the transaction as rollback.        -->
	<!--  Exceptions that we don't want people to catch shouldn't be a checked exception -->
	<bean id="repositoryService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name ="transactionManager">
			<ref bean ="transactionManager"/>
		</property>
		<property name ="target">
			<ref local="repositoryTarget"/>
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="login">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="addWorkspace">PROPAGATION_REQUIRED</prop>
				<prop key="createCredentials">PROPAGATION_REQUIRED</prop>
				<prop key="assignCredentials">PROPAGATION_REQUIRED</prop>
				<prop key="updateCredentials">PROPAGATION_REQUIRED</prop>
				<prop key="addFileItem">PROPAGATION_REQUIRED</prop>
				<prop key="addPackageItem">PROPAGATION_REQUIRED</prop>
				<prop key="updateFileItem">PROPAGATION_REQUIRED</prop>
				<prop key="updatePackageItem">PROPAGATION_REQUIRED</prop>
				<prop key="deleteVersion">PROPAGATION_REQUIRED</prop>
				<prop key="deleteNode">PROPAGATION_REQUIRED</prop>
				<prop key="copy*">PROPAGATION_REQUIRED</prop>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="logout">PROPAGATION_SUPPORTS</prop>
				<prop key="setProperty">PROPAGATION_SUPPORTS</prop>
				<!--  Read only methods -->
				<prop key="getFileItem">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="getVersionHistory">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="getNodeList">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
		<property name="preInterceptors">
			<list>
				<ref local="checkCredentialTicketBeforeAdvice"/>
			</list>
		</property>
		<property name="postInterceptors">
			<list>
				<ref bean="transactionRetryInterceptor" />	
			</list>
		</property>
	</bean>

	<bean id="repositoryTarget" class="org.lamsfoundation.lams.contentrepository.service.SimpleRepository">
		<property name="workspaceDAO"><ref bean="workspaceDAO"/></property>
		<property name="credentialDAO"><ref bean="credentialDAO"/></property>
		<property name="nodeFactory"><ref bean="nodeFactory"/></property>
	</bean>

	<bean id="checkCredentialTicketBeforeAdvice" class="org.lamsfoundation.lams.contentrepository.CheckCredentialTicketBeforeAdvice">
	</bean>

	<bean id="nodeFactory" class="org.lamsfoundation.lams.contentrepository.service.NodeFactory">
		<property name="nodeDAO"><ref bean="nodeDAO"/></property>
	</bean>

	<bean id="node" class="org.lamsfoundation.lams.contentrepository.service.SimpleVersionedNode"
		singleton="false" destroy-method="destroy">
		<property name="nodeDAO"><ref bean="nodeDAO"/></property>
		<property name="fileDAO"><ref bean="fileDAO"/></property>
		<property name="nodeFactory"><ref bean="nodeFactory"/></property>
	</bean>

	<!--  DAO classes -->
	<bean id="workspaceDAO" class="org.lamsfoundation.lams.contentrepository.dao.hibernate.WorkspaceDAO">
		<property name="sessionFactory"><ref bean="coreSessionFactory"/></property>
	</bean>  

	<bean id="credentialDAO" class="org.lamsfoundation.lams.contentrepository.dao.hibernate.CredentialDAO">
		<property name="sessionFactory"><ref bean="coreSessionFactory"/></property>
	</bean>  

	<bean id="nodeDAO" class="org.lamsfoundation.lams.contentrepository.dao.hibernate.NodeDAO">
		<property name="sessionFactory"><ref bean="coreSessionFactory"/></property>
	</bean>  

	<!--  Most DAO's are for Hibernate. fileDAO manages reading and writing files to the filesystem -->
	<bean id="fileDAO" class="org.lamsfoundation.lams.contentrepository.dao.file.FileDAO" />

</beans>
