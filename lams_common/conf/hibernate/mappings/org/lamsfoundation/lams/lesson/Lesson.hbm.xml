<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >

<hibernate-mapping>


	<class name="org.lamsfoundation.lams.lesson.Lesson"
		table="lams_lesson">

		<meta attribute="implement-equals" inherit="false">true</meta>

		<id name="lessonId" type="java.lang.Long" column="lesson_id">
			<generator class="native" />
		</id>
         <version
            name="version"
            column="version"
            type="java.lang.Integer">
         </version>
    	<property name="lessonDescription" type="java.lang.String" 
    			 column="description" length="65535">
	    </property>
    	<property name="lessonName" type="java.lang.String" not-null="true"
        	 	 column="name" length="255">
     	</property>
		<property name="createDateTime" type="java.sql.Timestamp"
			column="create_date_time" not-null="true" length="19">
		</property>
		<property name="startDateTime" type="java.sql.Timestamp"
			column="start_date_time" length="19">
		</property>
		<property name="endDateTime" type="java.sql.Timestamp"
			column="end_date_time" length="19">
		</property>
		<property name="scheduleStartDate" type="java.sql.Timestamp"
			column="schedule_start_date_time" length="19">
		</property>
		<property name="scheduleEndDate" type="java.sql.Timestamp"
			column="schedule_end_date_time" length="19">
		</property>				
		<property name="lessonStateId" type="java.lang.Integer"
			column="lesson_state_id" length="3">
		</property>
		<property name="previousLessonStateId" type="java.lang.Integer"
			column="previous_state_id" length="3">
		</property>                
		<property name="enableLessonIntro" type="java.lang.Boolean"
        		column="enable_lesson_intro" length="1">
		</property>
		<property name="displayDesignImage" type="java.lang.Boolean"
        		column="display_design_image" length="1">
		</property>
		<property name="learnerExportAvailable" type="java.lang.Boolean"
	        	column="learner_exportport_avail" length="1">
        	</property>
        <property name="scheduledNumberDaysToLessonFinish" type="java.lang.Integer"
        	column="scheduled_number_days_to_lesson_finish" length="3">
        </property>
		<property name="learnerPresenceAvailable" type="java.lang.Boolean"
        	column="learner_presence_avail" length="1">
        </property>
		<property name="learnerImAvailable" type="java.lang.Boolean"
        	column="learner_im_avail" length="1">
    	</property>
    	<property name="liveEditEnabled" type="java.lang.Boolean"
        	column="live_edit_enabled" length="1">
    	</property>
    	<property name="enableLessonNotifications" type="java.lang.Boolean"
    		column="enable_lesson_notifications" length="1">
    	</property>
		<property name="lockedForEdit" type="java.lang.Boolean"
        	column="locked_for_edit" length="1">
    	</property>
    	<property name="marksReleased" type="java.lang.Boolean"
        	column="marks_released" length="1">
    	</property>
    	<property name="learnerRestart" type="java.lang.Boolean"
        	column="learner_restart" length="1">
    	</property>
		
		<!-- Associations -->
		
		<!-- bi-directional many-to-one association to User -->
		<many-to-one name="user"
			class="org.lamsfoundation.lams.usermanagement.User"
			not-null="true">
			<column name="user_id" />
		</many-to-one>

		<!-- bi-directional many-to-one association to LearningDesign -->
		<many-to-one name="learningDesign"
			class="org.lamsfoundation.lams.learningdesign.LearningDesign"
			not-null="true"
			lazy="false">
			<column name="learning_design_id" />
		</many-to-one>
		
		<!-- bi-directional one-to-many association to LearnerProgress -->
		<set name="learnerProgresses" lazy="true" inverse="true"
			cascade="all-delete-orphan">
			<key>
				<column name="lesson_id" />
			</key>
			<one-to-many
				class="org.lamsfoundation.lams.lesson.LearnerProgress" />
		</set>
		
		<!-- bi-directional one-to-many association to gradebookUserLessons -->
		<set name="gradebookUserLessons" lazy="true" inverse="true"
			cascade="all-delete-orphan">
			<key>
				<column name="lesson_id" />
			</key>
			<one-to-many
				class="org.lamsfoundation.lams.gradebook.GradebookUserLesson" />
		</set>
		
		<!-- bi-directional many-to-one association to LessonClass -->
		<many-to-one name="lessonClass"
			class="org.lamsfoundation.lams.lesson.LessonClass"
			column="class_grouping_id"
			unique="true"
			not-null="false" 
			lazy="false"
			cascade = "all"/>

		<!-- bi-directional many-to-one association to Organisation -->
		<many-to-one name="organisation"
			class="org.lamsfoundation.lams.usermanagement.Organisation"
			not-null="false"
			lazy="false">
			<column name="organisation_id" />
		</many-to-one>
		
		<set name="precedingLessons" table="lams_lesson_dependency" cascade="all" >
            <key>
                <column name="lesson_id" not-null="true" />
            </key>
            <many-to-many entity-name="org.lamsfoundation.lams.lesson.Lesson">
                <column name="preceding_lesson_id" not-null="true" />
            </many-to-many>
        </set>
        
       <set name="succeedingLessons" table="lams_lesson_dependency" cascade="all" >
            <key>
                <column name="preceding_lesson_id" not-null="true" />
            </key>
            <many-to-many entity-name="org.lamsfoundation.lams.lesson.Lesson">
                <column name="lesson_id" not-null="true" />
            </many-to-many>
        </set>

	</class>
	
	<sql-query name="lessonsForMonitoringByUser">
		<return alias="lesson" class="org.lamsfoundation.lams.lesson.Lesson" />
		SELECT DISTINCT {lesson.*}
		  FROM lams_lesson {lesson},
		    lams_grouping,
		    lams_group,
		    lams_user_group,
		    lams_learning_design
		  WHERE ({lesson}.class_grouping_id = lams_grouping.grouping_id)
		    AND (lams_grouping.staff_group_id = lams_group.group_id)
		    AND (lams_group.group_id = lams_user_group.group_id)
		    AND NOT ({lesson}.lesson_state_id = 7)		    
		    AND (lams_user_group.user_id = :userId)
		    AND ({lesson}.learning_design_id = lams_learning_design.learning_design_id)
		    AND (lams_learning_design.copy_type_id=2)
		    
		UNION
		
		SELECT DISTINCT {lesson.*}
		  FROM lams_lesson {lesson}
		  WHERE ({lesson}.user_id = :userId)
		    AND ({lesson}.class_grouping_id IS NULL)
		    AND NOT ({lesson}.lesson_state_id = 7)		    
	</sql-query>
	
	<sql-query name="monitorsByToolSessionId">
		<return alias="user" class="org.lamsfoundation.lams.usermanagement.User" />
		SELECT DISTINCT {user.*}
		  FROM lams_lesson,
		    lams_grouping,
		    lams_group,
		    lams_user_group,
		    lams_learning_design,
		    lams_tool_session,
		    lams_user {user}
		  WHERE (lams_lesson.class_grouping_id = lams_grouping.grouping_id)
		    AND (lams_grouping.staff_group_id = lams_group.group_id)
		    AND (lams_group.group_id = lams_user_group.group_id)
		    AND ({user}.user_id = lams_user_group.user_id)
		    AND (lams_tool_session.tool_session_id = :sessionId)
		    AND (lams_tool_session.lesson_id = lams_lesson.lesson_id)
		    AND (lams_lesson.learning_design_id = lams_learning_design.learning_design_id)
		    AND (lams_learning_design.copy_type_id=2)	    
	</sql-query>

	<sql-query name="lessonsForMonitoring">
		<return alias="lesson" class="org.lamsfoundation.lams.lesson.Lesson" />
		SELECT DISTINCT {lesson.*}
		  FROM lams_lesson {lesson},
		    lams_grouping,
		    lams_group,
		    lams_user_group,
		    lams_learning_design
		  WHERE ({lesson}.class_grouping_id = lams_grouping.grouping_id)
		    AND (lams_grouping.staff_group_id = lams_group.group_id)
		    AND (lams_group.group_id = lams_user_group.group_id)
		    AND NOT ({lesson}.lesson_state_id = 7)		    
		    AND (lams_user_group.user_id = :userId)
		    AND ({lesson}.learning_design_id = lams_learning_design.learning_design_id)
		    AND (lams_learning_design.copy_type_id=2)
		    AND ({lesson}.organisation_id = :organisationId)
	</sql-query>

	<sql-query name="activeLessons">
		<return alias="lesson" class="org.lamsfoundation.lams.lesson.Lesson" />
		SELECT DISTINCT {lesson.*}
		  FROM lams_lesson {lesson},
		    lams_grouping,
		    lams_group,
		    lams_user_group,
		    lams_learning_design
		  WHERE ({lesson}.class_grouping_id = lams_grouping.grouping_id)
		    AND (lams_grouping.grouping_id = lams_group.grouping_id)
		    AND (lams_group.group_id = lams_user_group.group_id)
		    AND ({lesson}.lesson_state_id IN (3,5))		    
		    AND (lams_user_group.user_id = :userId)
		    AND ({lesson}.learning_design_id = lams_learning_design.learning_design_id)
		    AND (lams_learning_design.copy_type_id=2)
		    AND (lams_group.group_id != lams_grouping.staff_group_id)
		    AND ({lesson}.organisation_id = :organisationId)
	</sql-query>

	<sql-query name="activeLessonsAllOrganisations">
		<return alias="lesson" class="org.lamsfoundation.lams.lesson.Lesson" />
		SELECT DISTINCT {lesson.*}
		  FROM lams_lesson {lesson},
		    lams_grouping,
		    lams_group,
		    lams_user_group,
		    lams_learning_design
		  WHERE ({lesson}.class_grouping_id = lams_grouping.grouping_id)
		    AND (lams_grouping.grouping_id = lams_group.grouping_id)
		    AND (lams_group.group_id = lams_user_group.group_id)
		    AND ({lesson}.lesson_state_id IN (3,5))		    
		    AND (lams_user_group.user_id = :userId)
		    AND ({lesson}.learning_design_id = lams_learning_design.learning_design_id)
		    AND (lams_learning_design.copy_type_id=2)
		    AND (lams_group.group_id != lams_grouping.staff_group_id)
	</sql-query>
	
	<sql-query name="activeLearners">
		<return alias="learner" class="org.lamsfoundation.lams.usermanagement.User" />
		SELECT DISTINCT {learner.*}
		  FROM lams_user {learner},
		       lams_learner_progress
		  WHERE ({learner}.user_id = lams_learner_progress.user_id)
		  AND   (lams_learner_progress.lesson_id  = :lessonId)
	</sql-query>

	<sql-query name="learnerLessonsByOrgAndUserWithCompletedFlag">
		<return-scalar column="lesson_id" type="long" />
		<return-scalar column="name" type="string" />
		<return-scalar column="description" type="string" />
		<return-scalar column="lesson_state_id" type="integer" />
		<return-scalar column="lesson_completed_flag" type="boolean" />
		<return-scalar column="enable_lesson_notifications" type="boolean" />
		<return-scalar column="dependent" type="boolean" />
		<return-scalar column="scheduledFinish" type="boolean" />
		SELECT l.lesson_id, l.name, l.description, l.lesson_state_id, lp.lesson_completed_flag, l.enable_lesson_notifications,
		       (SELECT TRUE FROM lams_lesson_dependency ld WHERE ld.lesson_id = l.lesson_id LIMIT 1) AS dependent,
		        l.schedule_end_date_time IS NOT NULL OR l.scheduled_number_days_to_lesson_finish IS NOT NULL AS scheduledFinish
		  FROM (lams_lesson l, lams_learning_design ld, lams_group g, lams_user_group ug, lams_grouping gi)
		    LEFT JOIN lams_learner_progress lp ON lp.user_id = ug.user_id AND lp.lesson_id = l.lesson_id
		  WHERE l.learning_design_id = ld.learning_design_id
		    AND ld.copy_type_id != 3
			AND l.organisation_id = :orgId
			AND l.class_grouping_id = g.grouping_id
			AND l.lesson_state_id != 7
			AND ug.group_id = g.group_id
			AND ug.user_id = :userId
			AND gi.grouping_id = g.grouping_id
			AND g.group_id != gi.staff_group_id
	</sql-query>
	
	<sql-query name="staffLessonsByOrgAndUserWithCompletedFlag">
		<return-scalar column="lesson_id" type="long" />
		<return-scalar column="name" type="string" />
		<return-scalar column="description" type="string" />
		<return-scalar column="lesson_state_id" type="integer" />
		<return-scalar column="lesson_completed_flag" type="boolean" />
		<return-scalar column="enable_lesson_notifications" type="boolean" />
		<return-scalar column="dependent" type="boolean" />
		<return-scalar column="scheduledFinish" type="boolean" />
		SELECT l.lesson_id, l.name, l.description, l.lesson_state_id, lp.lesson_completed_flag, l.enable_lesson_notifications,
		       (SELECT TRUE FROM lams_lesson_dependency ld WHERE ld.lesson_id = l.lesson_id LIMIT 1) AS dependent,
		        l.schedule_end_date_time IS NOT NULL OR l.scheduled_number_days_to_lesson_finish IS NOT NULL AS scheduledFinish
		  FROM (lams_lesson l, lams_learning_design ld, lams_group g, lams_user_group ug, lams_grouping gi)
		    LEFT JOIN lams_learner_progress lp ON lp.user_id = ug.user_id AND lp.lesson_id = l.lesson_id
		  WHERE l.learning_design_id = ld.learning_design_id
		    AND ld.copy_type_id != 3
			AND l.organisation_id = :orgId
			AND l.class_grouping_id = g.grouping_id
			AND l.lesson_state_id != 7
			AND ug.group_id = g.group_id
			AND ug.user_id = :userId
			AND gi.grouping_id = g.grouping_id
			AND g.group_id = gi.staff_group_id
	</sql-query>
	
	<sql-query name="allLessonsByOrgAndUserWithCompletedFlag">
		<return-scalar column="lesson_id" type="long" />
		<return-scalar column="name" type="string" />
		<return-scalar column="description" type="string" />
		<return-scalar column="lesson_state_id" type="integer" />
		<return-scalar column="lesson_completed_flag" type="boolean" />
		<return-scalar column="enable_lesson_notifications" type="boolean" />
		<return-scalar column="dependent" type="boolean" />
		<return-scalar column="scheduledFinish" type="boolean" />
		SELECT l.lesson_id, l.name, l.description, l.lesson_state_id, lp.lesson_completed_flag, l.enable_lesson_notifications,
		       (SELECT TRUE FROM lams_lesson_dependency ld WHERE ld.lesson_id = l.lesson_id LIMIT 1) AS dependent,
		       l.schedule_end_date_time IS NOT NULL OR l.scheduled_number_days_to_lesson_finish IS NOT NULL AS scheduledFinish
		  FROM (lams_lesson l, lams_learning_design ld)
		    LEFT JOIN lams_learner_progress lp ON lp.user_id = :userId AND lp.lesson_id = l.lesson_id
		  WHERE l.learning_design_id = ld.learning_design_id
		    AND ld.copy_type_id != 3
			AND l.organisation_id = :orgId
			AND l.lesson_state_id != 7
	</sql-query>
	
	<sql-query name="lessonsByOrgAndUserWithChildOrgs">
 		<return alias="lesson" class="org.lamsfoundation.lams.lesson.Lesson" />
 		SELECT DISTINCT {lesson.*}
 			FROM (lams_lesson {lesson}, lams_learning_design ld, lams_group g, lams_user_group ug, lams_organisation lo)
 			WHERE {lesson}.learning_design_id = ld.learning_design_id
				AND ld.copy_type_id != 3
				AND ({lesson}.organisation_id = lo.organisation_id)
				AND (lo.organisation_id = :orgId or lo.parent_organisation_id = :orgId)
				AND {lesson}.class_grouping_id = g.grouping_id
				AND {lesson}.lesson_state_id != 7
				AND ug.group_id = g.group_id
				AND ug.user_id = :userId
	</sql-query>
	
</hibernate-mapping>
