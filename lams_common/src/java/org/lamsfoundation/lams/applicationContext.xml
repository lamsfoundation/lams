<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
 - Application context definition for LAMS. Used to deploy to JBOSS.
-->

<beans>

 	<!-- Hibernate Properties. Should be used by all Hibernate session factories unless -->
  	<!--  the tool has a specific need for a different setting. 						-->			
  	<!-- If you change hibernate.treecache.objectName, you will also need to change the -->
  	<!--  cacheManager object 															-->
  	<bean id="hibernateProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
	  	<property name="properties">
		<props>
			<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
			<prop key="hibernate.show_sql">false</prop>
			<prop key="hibernate.transaction.manager_lookup_class">org.hibernate.transaction.JBossTransactionManagerLookup</prop>
			<prop key="hibernate.cache.use_second_level_cache">true</prop>
			<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.jbc2.SharedJBossCacheRegionFactory</prop>
			<!-- For JBoss Cache 2 and 3, and for Hibernate 3 there is a different idea of accessing Cache,
				called Region Factory Class. Currently, Hibernate gets the Cache configuration from "treecache.xml" file
				located in LAMS EAR and creates a local instance for its own use.
				In the future, this may be changed to a JNDI exposed instance, for lams_admin to access.
				It is impossible now, though - JBoss 5.1.0.GA does not support it yet.
				
				This statement will be used for JNDI exposed Cache:
		 		<prop key="hibernate.cache.region.jbc2.cfg.shared">java:LamsCache</prop>
		 		
		 		This statement has been used in previously used approach:			
				<prop key="hibernate.treecache.objectName">jboss.cache:service=TreeCache</prop>
			-->
			
		</props>
		</property>
  	</bean>
  	
	<import resource="commonContext.xml"/>

	<!-- JNDI DataSource for all "core" components 		  -->
	<!-- uses lams-ds datasource set up in the app-server -->
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName"><value>java:jdbc/lams-ds</value></property>
	</bean>

	<!--  Transaction manager for all transactions involving the core classes or the content repository. 
		  For JBoss 5, it has been changed to Hibernate Transaction Manager, instead of JTA.
	
		  "autodetectTransactionManager" defaults to true so we don't need to include it.  		 	
	  	  But remember all application servers do not have the same JNDI name for their transaction manager!
	 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory"><ref bean="coreSessionFactory"/></property>
	</bean>
	
	<!-- Extra wrapper for all proxied methods.
		 In case of DataIntegrityViolationException it retrires the transaction up to 3 times -->
	<bean id="transactionRetryInterceptor" class="org.lamsfoundation.lams.web.filter.TransactionRetryInterceptor">
		<property name="transactionRetryService"><ref bean="transactionRetryService"/></property>
		<property name="sessionFactory"><ref bean="coreSessionFactory"/></property>
	</bean>
</beans>